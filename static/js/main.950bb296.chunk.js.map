{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Todo","memo","props","todo","markCompleted","getEditTodo","todoEditingId","editTodo","index","removeTodo","isEditing","id","useState","text","setText","onEditTodo","className","isCompleted","value","onChange","e","target","onBlur","onKeyPress","key","type","checked","onDoubleClick","onClick","TodoList","listTodos","checkAll","isCheckedAll","console","log","htmlFor","map","Header","addTodo","placeholder","event","Date","valueOf","Footer","setStatusFilter","activeButton","clearCompleted","numOfTodosLeft","numOfTodos","href","filterByStatus","status","filter","item","filterTodosLeft","App","state","addTodos","setState","preState","updatedListTodos","splice","prevState","this","length","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.950bb296.chunk.js","sourcesContent":["import React, { memo, useState } from 'react'\n\nconst Todo = memo(props => {\n    const {\n        todo,\n        markCompleted,\n        getEditTodo,\n        todoEditingId,\n        editTodo,\n        index,\n        removeTodo\n    } = props\n    const isEditing = todoEditingId === todo.id\n    const [text, setText] = useState(todo.text)\n    const onEditTodo = () => {\n        editTodo({\n            ...todo,\n            text\n        }, index)\n        getEditTodo('')\n    }\n\n    return (\n        <li className={`${isEditing ? 'editing' : ''} ${todo.isCompleted ? 'completed' : ''}`}>\n            {\n                !isEditing ?\n                    <div className=\"view\">\n                        <input\n                            className=\"toggle\"\n                            type=\"checkbox\"\n                            checked={todo.isCompleted}\n                            onChange={() => markCompleted(todo.id)}\n                        />\n                        <label onDoubleClick={() => getEditTodo(todo.id)}>{todo.text}</label>\n                        <button className=\"destroy\" onClick={() => removeTodo(todo.id)} />\n                    </div> :\n                    <input\n                        className=\"edit\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        onBlur={onEditTodo}\n                        onKeyPress={(e) => {\n                            if (e.key === 'Enter' && text) {\n                                onEditTodo()\n                            }\n                        }}\n                    />\n            }\n        </li>\n    )\n})\n\nexport default Todo","import React, { memo } from 'react'\nimport Todo from './Todo'\n\nconst TodoList = memo(props => {\n    const { listTodos, checkAll, isCheckedAll } = props\n    return (\n        <section className=\"main\">\n            <input\n                className=\"toggle-all\"\n                type=\"checkbox\"\n                onChange={() => {\n                    console.log('mmark done')\n                    checkAll()\n                }}\n                checked={isCheckedAll}\n            />\n            <label htmlFor=\"toggle-all\" onClick={checkAll} ></label>\n            <ul className=\"todo-list\">\n                {\n                    listTodos.map((todo, index) => <Todo index={index} key={todo.id} todo={todo} {...props} />)\n                }\n            </ul>\n\n        </section>\n    )\n})\n\nexport default TodoList","import React, { memo, useState } from 'react'\n\nconst Header = memo((props) => {\n    const [text, setText] = useState('')\n    const { addTodo } = props\n\n    const onAddTodo = (event) => {\n        if (event.key === 'Enter' && text) {\n            addTodo({\n                id: new Date().valueOf(),\n                text,\n                isCompleted: false\n            })\n            setText('')\n        }\n    }\n\n    return (\n        <header className=\"header\">\n            <h1>todos</h1>\n            <input\n                className=\"new-todo\"\n                placeholder=\"What needs to be done?\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={onAddTodo}\n            />\n        </header>\n    )\n})\n\nexport default Header","import React, { memo } from 'react'\n\nconst Footer = memo((props) => {\n    const { setStatusFilter, activeButton, clearCompleted, numOfTodosLeft, numOfTodos } = props\n    return (\n        <footer className=\"footer\">\n            <span className=\"todo-count\">\n                <strong>{numOfTodosLeft}</strong>\n                <span> </span>\n                <span>{numOfTodosLeft > 1 ? 'items' : 'item'}</span>\n                <span> left</span>\n            </span>\n            <ul className=\"filters\">\n                <li>\n                    <a\n                        href=\"#/\"\n                        className={`${activeButton === 'ALL' ? \"selected\" : ''}`}\n                        onClick={() => setStatusFilter('ALL')}\n                    >\n                        All\n                    </a>\n                </li>\n                <span></span>\n                <li>\n                    <a\n                        href=\"#/active\"\n                        className={`${activeButton === 'ACTIVE' ? \"selected\" : ''}`}\n                        onClick={() => setStatusFilter('ACTIVE')}\n                    >\n                        Active\n                    </a>\n                </li>\n                <span></span>\n                <li>\n                    <a\n                        href=\"#/completed\"\n                        className={`${activeButton === 'COMPLETED' ? \"selected\" : ''}`}\n                        onClick={() => setStatusFilter('COMPLETED')}\n                    >\n                        Completed\n                    </a>\n                </li>\n            </ul>\n            {\n                numOfTodosLeft < numOfTodos && <button className=\"clear-completed\" onClick={clearCompleted}>Clear completed</button>\n            }\n        </footer>\n    )\n})\n\nexport default Footer","import React, { PureComponent } from 'react';\nimport TodoList from './components/TodoList'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nimport './css/Todo.css'\n\nconst filterByStatus = (listTodos = [], status = '', id) => {\n  switch (status) {\n    case 'ACTIVE':\n      return listTodos.filter(item => !item.isCompleted)\n    case 'COMPLETED':\n      return listTodos.filter(item => item.isCompleted)\n    case 'REMOVE':\n      return listTodos.filter(item => item.id !== id)\n    default:\n      return listTodos\n  }\n}\n\nconst filterTodosLeft = (listTodos = []) => {\n  return listTodos.filter(item => !item.isCompleted)\n}\n\nclass App extends PureComponent {\n  state = {\n    listTodos: [],\n    isCheckedAll: false,\n    status: 'ALL',\n    todoEditingId: ''\n  }\n\n  addTodos = (todo = {}) => {\n    this.setState(preState => ({\n      listTodos: [...preState.listTodos, todo]\n    }))\n  }\n\n  markCompleted = (id = '') => {\n    const { listTodos } = this.state\n    let isCheckedAll = true\n    const updatedListTodos = listTodos.map(item => {\n      if ((!item.isCompleted && item.id !== id) || (item.isCompleted && item.id === id)) {\n        isCheckedAll = false\n      }\n      if (item.id === id) {\n        return { ...item, isCompleted: !item.isCompleted }\n      }\n      return item\n    })\n    this.setState({\n      isCheckedAll,\n      listTodos: updatedListTodos\n    })\n  }\n\n  checkAll = () => {\n    const { listTodos, isCheckedAll } = this.state\n    const updatedListTodos = listTodos.map(item => ({ ...item, isCompleted: !isCheckedAll }))\n    this.setState(preState => ({\n      isCheckedAll: !preState.isCheckedAll,\n      listTodos: updatedListTodos\n    }))\n  }\n\n  clearCompleted = () => {\n    this.setState(preState => ({\n      listTodos: filterTodosLeft(preState.listTodos)\n    }))\n  }\n\n  getEditTodo = (id = '') => {\n    this.setState({\n      todoEditingId: id\n    })\n  }\n\n  editTodo = (todo, index) => {\n    const { listTodos } = this.state\n    listTodos.splice(index, 1, todo)\n    this.setState({ listTodos })\n  }\n\n  removeTodo = (id = '') => {\n    this.setState(prevState => ({\n      listTodos: filterByStatus(prevState.listTodos, 'REMOVE', id)\n    }))\n  }\n\n  render() {\n    const { listTodos, isCheckedAll, status, todoEditingId } = this.state\n    return (\n      <div className=\"todoapp\">\n        <Header\n          addTodo={this.addTodos}\n        />\n        <TodoList\n          listTodos={filterByStatus(listTodos, status)}\n          markCompleted={this.markCompleted}\n          checkAll={this.checkAll}\n          isCheckedAll={isCheckedAll}\n          todoEditingId={todoEditingId}\n          getEditTodo={this.getEditTodo}\n          editTodo={this.editTodo}\n          removeTodo={this.removeTodo}\n        />\n        <Footer\n          activeButton={status}\n          setStatusFilter={(status) => this.setState({ status })}\n          clearCompleted={this.clearCompleted}\n          numOfTodosLeft={filterTodosLeft(listTodos).length}\n          numOfTodos={listTodos.length}\n        />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}